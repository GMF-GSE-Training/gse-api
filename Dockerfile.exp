#0

# Gunakan Node.js versi alpine
FROM node:20-alpine

# Tentukan working directory dalam container
WORKDIR /app

# Salin file package.json dan package-lock.json
COPY package*.json ./

# Install dependensi
RUN npm install --only=production

# Salin semua file source code ke dalam container
COPY . .

# Build aplikasi
RUN npm run build --configuration=production

# Hapus folder `src` untuk menjaga image tetap kecil (opsional)
RUN rm -rf .env src

# Tentukan port yang digunakan oleh aplikasi
ENV PORT=3000

# Jalankan aplikasi
CMD ["node", "dist/main.js"]

#1

# Gunakan Node.js versi alpine untuk image yang lebih ringan
FROM node:20-alpine AS builder

# Tentukan working directory dalam container
WORKDIR /app

# Salin file yang diperlukan untuk dependency install
COPY package*.json nest-cli.json tsconfig*.json ./

# Install NestJS CLI secara global dan semua dependencies
RUN npm install -g @nestjs/cli && npm install

# Salin semua file source code ke dalam container
COPY . .

# Build aplikasi menggunakan NestJS CLI
RUN nest build

# Hapus file yang tidak diperlukan untuk menjaga ukuran image tetap kecil
RUN rm -rf .env src

# Gunakan image baru yang lebih kecil untuk menjalankan aplikasi
FROM node:20-alpine

WORKDIR /app

# Salin hasil build dari tahap sebelumnya
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./

# Tentukan port yang digunakan oleh aplikasi
ENV PORT=8080

# Jalankan aplikasi
CMD ["node", "dist/main.js"]

#2

# Gunakan Node.js versi alpine untuk image yang lebih ringan
FROM node:20-alpine AS builder

# Tentukan working directory dalam container
WORKDIR /app

# Salin file yang diperlukan untuk dependency install
COPY package*.json nest-cli.json tsconfig*.json prisma ./  

# Install dependencies
RUN npm install  

# Generate Prisma Client agar Prisma bisa digunakan
#RUN npx prisma generate  

# Salin semua file source code ke dalam container
COPY . .  

# Build aplikasi menggunakan NestJS CLI
RUN npx nest build  

# Hapus file yang tidak diperlukan untuk menjaga ukuran image tetap kecil
RUN rm -rf .env src  

# Gunakan image baru yang lebih kecil untuk menjalankan aplikasi
FROM node:20-alpine

WORKDIR /app

# Salin hasil build dari tahap sebelumnya
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./  

# Tentukan port yang digunakan oleh aplikasi (Cloud Run default: 8080)
ENV PORT=8080
EXPOSE 8080

# Jalankan aplikasi
CMD ["node", "dist/src/main.js"]

#3

# Stage 1: Builder
FROM node:20-alpine AS builder

# Tentukan working directory
WORKDIR /app

# Salin file yang diperlukan untuk instalasi dependensi
COPY package*.json nest-cli.json tsconfig*.json ./

# Instal dependensi
RUN npm install --only=production

# Jika menggunakan Prisma, salin folder prisma dan generate client
COPY prisma ./prisma
RUN npx prisma generate

# Salin semua file source code
COPY . .

# Build aplikasi menggunakan NestJS CLI
RUN npx nest build

# Hapus file yang tidak diperlukan
RUN rm -rf .env src

# Stage 2: Runtime
FROM node:20-alpine

# Tentukan working directory
WORKDIR /app

# Salin hasil build dari stage builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./

# Tentukan port yang digunakan oleh aplikasi
ENV PORT=8080
EXPOSE 8080

# Jalankan aplikasi
CMD ["node", "dist/main.js"]