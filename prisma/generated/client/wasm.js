
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  idNumber: 'idNumber',
  name: 'name',
  nik: 'nik',
  dinas: 'dinas',
  password: 'password',
  photo: 'photo',
  hashAlgorithm: 'hashAlgorithm',
  roleId: 'roleId',
  participantId: 'participantId',
  verifiedAccount: 'verifiedAccount',
  accountVerificationToken: 'accountVerificationToken',
  verificationSentAt: 'verificationSentAt',
  passwordResetToken: 'passwordResetToken',
  updateEmailToken: 'updateEmailToken',
  loginAttempts: 'loginAttempts',
  lockUntil: 'lockUntil',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  oauthProvider: 'oauthProvider',
  oauthId: 'oauthId',
  oauthRefreshToken: 'oauthRefreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OAuthStateScalarFieldEnum = {
  id: 'id',
  state: 'state',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  provider: 'provider'
};

exports.Prisma.AppConfigScalarFieldEnum = {
  id: 'id',
  frontendUrl: 'frontendUrl',
  backendUrl: 'backendUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileMetadataScalarFieldEnum = {
  id: 'id',
  path: 'path',
  fileName: 'fileName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  storageType: 'storageType',
  iv: 'iv',
  isSensitive: 'isSensitive',
  createdAt: 'createdAt',
  participantSimAId: 'participantSimAId',
  participantSimBId: 'participantSimBId',
  participantKtpId: 'participantKtpId',
  participantFotoId: 'participantFotoId',
  participantSuratSehatButaWarnaId: 'participantSuratSehatButaWarnaId',
  participantSuratBebasNarkobaId: 'participantSuratBebasNarkobaId',
  participantQrCodeId: 'participantQrCodeId'
};

exports.Prisma.ParticipantScalarFieldEnum = {
  id: 'id',
  idNumber: 'idNumber',
  name: 'name',
  nik: 'nik',
  dinas: 'dinas',
  bidang: 'bidang',
  company: 'company',
  email: 'email',
  phoneNumber: 'phoneNumber',
  nationality: 'nationality',
  placeOfBirth: 'placeOfBirth',
  dateOfBirth: 'dateOfBirth',
  qrCodeLink: 'qrCodeLink',
  tglKeluarSuratSehatButaWarna: 'tglKeluarSuratSehatButaWarna',
  tglKeluarSuratBebasNarkoba: 'tglKeluarSuratBebasNarkoba',
  gmfNonGmf: 'gmfNonGmf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CapabilityScalarFieldEnum = {
  id: 'id',
  ratingCode: 'ratingCode',
  trainingCode: 'trainingCode',
  trainingName: 'trainingName',
  totalTheoryDurationRegGse: 'totalTheoryDurationRegGse',
  totalPracticeDurationRegGse: 'totalPracticeDurationRegGse',
  totalTheoryDurationCompetency: 'totalTheoryDurationCompetency',
  totalPracticeDurationCompetency: 'totalPracticeDurationCompetency',
  totalDuration: 'totalDuration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CurriculumSyllabusScalarFieldEnum = {
  id: 'id',
  capabilityId: 'capabilityId',
  name: 'name',
  theoryDuration: 'theoryDuration',
  practiceDuration: 'practiceDuration',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.COTScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  trainingLocation: 'trainingLocation',
  theoryInstructorRegGse: 'theoryInstructorRegGse',
  theoryInstructorCompetency: 'theoryInstructorCompetency',
  practicalInstructor1: 'practicalInstructor1',
  practicalInstructor2: 'practicalInstructor2',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CapabilityCOTScalarFieldEnum = {
  capabilityId: 'capabilityId',
  cotId: 'cotId'
};

exports.Prisma.ParticipantsCOTScalarFieldEnum = {
  id: 'id',
  participantId: 'participantId',
  cotId: 'cotId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SignatureScalarFieldEnum = {
  id: 'id',
  idNumber: 'idNumber',
  role: 'role',
  name: 'name',
  eSignId: 'eSignId',
  signatureType: 'signatureType',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  cotId: 'cotId',
  signatureId: 'signatureId',
  participantId: 'participantId',
  issuedDate: 'issuedDate',
  certificateNumber: 'certificateNumber',
  attendance: 'attendance',
  theoryScore: 'theoryScore',
  practiceScore: 'practiceScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  sessionId: 'sessionId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlacklistedTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OAuthProvider = exports.$Enums.OAuthProvider = {
  GOOGLE: 'GOOGLE',
  MICROSOFT: 'MICROSOFT'
};

exports.SignatureType = exports.$Enums.SignatureType = {
  SIGNATURE1: 'SIGNATURE1',
  SIGNATURE2: 'SIGNATURE2'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  OAuthState: 'OAuthState',
  AppConfig: 'AppConfig',
  FileMetadata: 'FileMetadata',
  Participant: 'Participant',
  Capability: 'Capability',
  CurriculumSyllabus: 'CurriculumSyllabus',
  COT: 'COT',
  CapabilityCOT: 'CapabilityCOT',
  ParticipantsCOT: 'ParticipantsCOT',
  Signature: 'Signature',
  Certificate: 'Certificate',
  RefreshToken: 'RefreshToken',
  BlacklistedToken: 'BlacklistedToken',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
