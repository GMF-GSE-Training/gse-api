// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String        @id @default(uuid())
  participantId             String?       @unique
  idNumber                  String?       @unique @db.VarChar(20)
  email                     String        @unique @db.VarChar(255)
  nik                       String?       @unique @db.VarChar(50)
  name                      String        @db.VarChar(255)
  password                  String        @db.VarChar(255)
  refreshToken              String?       @db.Text
  accountVerificationToken  String?       @db.VarChar(512)
  lastVerificationEmailSentAt DateTime?   @map("last_verification_email_sent_at")
  emailChangeToken          String?       @db.Text
  passwordResetToken        String?       @db.Text
  updateEmailToken          String?       @db.Text
  roleId                    String
  dinas                     String?       @db.VarChar(50)
  verifiedAccount           Boolean       @default(false)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt

  role                      Role          @relation(fields: [roleId], references: [id])
  participant               Participant?  @relation(fields: [participantId], references: [id])

  @@map("users")
}

model Role {
  id    String  @id @default(uuid())
  name  String  @unique @db.VarChar(50)

  users User[]

  @@map("roles")
}


model Participant {
  id                            String              @id @default(uuid())
  idNumber                      String?             @unique @db.VarChar(20)
  name                          String              @db.VarChar(255)
  nik                           String              @unique @db.VarChar(50)
  dinas                         String?             @db.VarChar(50)
  bidang                        String?             @db.VarChar(50)
  company                       String?             @db.VarChar(255)
  email                         String              @db.VarChar(255)
  phoneNumber                   String?             @db.VarChar(50)
  nationality                   String?             @db.VarChar(50)
  placeOfBirth                  String?             @db.VarChar(50)
  dateOfBirth                   DateTime?           @db.Date
  simA                          Bytes?
  simAFileName                  String?             @db.VarChar(255)
  simB                          Bytes?
  simBFileName                  String?             @db.VarChar(255)
  ktp                           Bytes?
  ktpFileName                   String?             @db.VarChar(255)
  foto                          Bytes?
  fotoFileName                  String?             @db.VarChar(255)
  suratSehatButaWarna           Bytes?
  suratSehatButaWarnaFileName   String?             @db.VarChar(255)
  tglKeluarSuratSehatButaWarna  DateTime?           @db.Date
  suratBebasNarkoba             Bytes?
  suratBebasNarkobaFileName     String?             @db.VarChar(255)
  tglKeluarSuratBebasNarkoba    DateTime?           @db.Date
  qrCode                        Bytes?
  qrCodeLink                    String?             @db.Text
  gmfNonGmf                     String?             @db.VarChar(20)

  participantsCots              ParticipantsCOT[]
  user                          User?

  @@map("participants")
}

model Capability {
  id                                String                  @id @default(uuid())
  ratingCode                        String                  @db.VarChar(20)
  trainingCode                      String                  @db.VarChar(50)
  trainingName                      String                  @db.VarChar(50)
  totalTheoryDurationRegGse         Int?
  totalPracticeDurationRegGse       Int?
  totalTheoryDurationCompetency     Int?
  totalPracticeDurationCompetency   Int?
  totalDuration                     Int?                

  curriculumSyllabus                CurriculumSyllabus[]
  capabilityCots                    CapabilityCOT[]

  @@map("capabilities")
}

model CurriculumSyllabus {
  id                String      @id @default(uuid())
  capabilityId      String
  name              String      @db.VarChar(50)
  theoryDuration    Int
  practiceDuration  Int
  type              String      @db.VarChar(20)

  capability        Capability    @relation(fields: [capabilityId], references: [id])

  @@map("curriculumSyllabus")
}

model COT {
  id                              String              @id @default(uuid())
  startDate                       DateTime
  endDate                         DateTime
  trainingLocation                String              @db.VarChar(50)
  theoryInstructorRegGse          String              @db.VarChar(50)
  theoryInstructorCompetency      String              @db.VarChar(50)
  practicalInstructor1            String              @db.VarChar(50)
  practicalInstructor2            String              @db.VarChar(50)
  status                          String              @db.VarChar(50)

  capabilityCots                  CapabilityCOT[]
  participantsCots                ParticipantsCOT[]
  certificate                     Certificate[]

  @@map("cots")
}

model CapabilityCOT {
  capabilityId                    String
  cotId                           String

  capability                      Capability           @relation(fields: [capabilityId], references: [id])
  cot                             COT                  @relation(fields: [cotId], references: [id])

  @@id([capabilityId, cotId])                            // Primary key untuk join table
  @@map("capabilityCots")
}

model ParticipantsCOT {
  id              String         @id @default(uuid())
  participantId   String?
  cotId           String

  participant     Participant?   @relation(fields: [participantId], references: [id])
  cot             COT            @relation(fields: [cotId], references: [id])

  @@map("participantsCot")
}

model Signature {
  id              String          @id @default(uuid())
  idNumber        String          @db.VarChar(20)
  role            String          @db.VarChar(50)
  name            String          @db.VarChar(50)
  eSign           Bytes
  eSignFileName   String?         @db.VarChar(255)
  signatureType   SignatureType
  status          Boolean         @default(false)

  certificates    Certificate[]

  @@map("signatures")
}

enum SignatureType {
  SIGNATURE1
  SIGNATURE2
}

model Certificate {
  id                  String            @id @default(uuid())
  cotId               String
  signatureId         String
  certificateNumber   String            @db.VarChar(50)
  attendance          Boolean
  theoryScore         Float
  practiceScore       Float

  cot                 COT               @relation(fields: [cotId], references: [id])
  signature           Signature         @relation(fields: [signatureId], references: [id])

  @@map("certificates")
}
